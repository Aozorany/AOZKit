//
//  UIScrollView+AOZCategory.m
//  AOZKit
//
//  Auto generated by Aozorany.
//  DO NOT EDIT THIS FILE DIRECTLY, IF YOU HAVE NEW CLASSES OR PROPERTIES, PLEASE ADD THEM TO AOZCategorygGenerator.py!


#import "UIScrollView+AOZCategory.h"


#pragma mark -
@implementation UIScrollView (AOZCategory)

#pragma mark public: Delegate
- (UIScrollView * (^)(id<UIScrollViewDelegate>))aozDelegate {
    return ^(id<UIScrollViewDelegate> delegate) {
        self.delegate = delegate;
        return self;
    };
}

#pragma mark public: Display of Content
- (UIScrollView * (^)(CGPoint))aozContentOffset {
    return ^(CGPoint contentOffset) {
        self.contentOffset = contentOffset;
        return self;
    };
}

- (UIScrollView * (^)(CGSize))aozContentSize {
    return ^(CGSize contentSize) {
        self.contentSize = contentSize;
        return self;
    };
}

- (UIScrollView * (^)(UIEdgeInsets))aozContentInset {
    return ^(UIEdgeInsets contentInset) {
        self.contentInset = contentInset;
        return self;
    };
}

#pragma mark public: Managing Scrolling
- (UIScrollView * (^)(BOOL))aozScrollEnabled {
    return ^(BOOL scrollEnabled) {
        self.scrollEnabled = scrollEnabled;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozDirectionalLockEnabled {
    return ^(BOOL directionalLockEnabled) {
        self.directionalLockEnabled = directionalLockEnabled;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozScrollsToTop {
    return ^(BOOL scrollsToTop) {
        self.scrollsToTop = scrollsToTop;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozPagingEnabled {
    return ^(BOOL pagingEnabled) {
        self.pagingEnabled = pagingEnabled;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozBounces {
    return ^(BOOL bounces) {
        self.bounces = bounces;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozAlwaysBounceVertical {
    return ^(BOOL alwaysBounceVertical) {
        self.alwaysBounceVertical = alwaysBounceVertical;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozAlwaysBounceHorizontal {
    return ^(BOOL alwaysBounceHorizontal) {
        self.alwaysBounceHorizontal = alwaysBounceHorizontal;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozCanCancelContentTouches {
    return ^(BOOL canCancelContentTouches) {
        self.canCancelContentTouches = canCancelContentTouches;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozDelaysContentTouches {
    return ^(BOOL delaysContentTouches) {
        self.delaysContentTouches = delaysContentTouches;
        return self;
    };
}

- (UIScrollView * (^)(CGFloat))aozDecelerationRate {
    return ^(CGFloat decelerationRate) {
        self.decelerationRate = decelerationRate;
        return self;
    };
}

#pragma mark public: Scroll Indicator 
- (UIScrollView * (^)(UIScrollViewIndicatorStyle))aozIndicatorStyle {
    return ^(UIScrollViewIndicatorStyle indicatorStyle) {
        self.indicatorStyle = indicatorStyle;
        return self;
    };
}

- (UIScrollView * (^)(UIEdgeInsets))aozScrollIndicatorInsets {
    return ^(UIEdgeInsets scrollIndicatorInsets) {
        self.scrollIndicatorInsets = scrollIndicatorInsets;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozShowsHorizontalScrollIndicator {
    return ^(BOOL showsHorizontalScrollIndicator) {
        self.showsHorizontalScrollIndicator = showsHorizontalScrollIndicator;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozShowsVerticalScrollIndicator {
    return ^(BOOL showsVerticalScrollIndicator) {
        self.showsVerticalScrollIndicator = showsVerticalScrollIndicator;
        return self;
    };
}

#pragma mark public: Zooming and Panning
- (UIScrollView * (^)(CGFloat))aozZoomScale {
    return ^(CGFloat zoomScale) {
        self.zoomScale = zoomScale;
        return self;
    };
}

- (UIScrollView * (^)(CGFloat))aozMaximumZoomScale {
    return ^(CGFloat maximumZoomScale) {
        self.maximumZoomScale = maximumZoomScale;
        return self;
    };
}

- (UIScrollView * (^)(CGFloat))aozMinimumZoomScale {
    return ^(CGFloat minimumZoomScale) {
        self.minimumZoomScale = minimumZoomScale;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozBouncesZoom {
    return ^(BOOL bouncesZoom) {
        self.bouncesZoom = bouncesZoom;
        return self;
    };
}

#pragma mark public: Keyboard and Index
- (UIScrollView * (^)(UIScrollViewKeyboardDismissMode))aozKeyboardDismissMode {
    return ^(UIScrollViewKeyboardDismissMode keyboardDismissMode) {
        self.keyboardDismissMode = keyboardDismissMode;
        return self;
    };
}

- (UIScrollView * (^)(UIScrollViewIndexDisplayMode))aozIndexDisplayMode {
    return ^(UIScrollViewIndexDisplayMode indexDisplayMode) {
        self.indexDisplayMode = indexDisplayMode;
        return self;
    };
}

#pragma mark public: Superviews
- (UIScrollView * (^)(UIView *))aozAddToSuperview {
    return ^(UIView * addToSuperview) {
        [addToSuperview addSubview:self];
        return self;
    };
}

#pragma mark public: Layers
- (UIScrollView * (^)(CGFloat))aozLayerBorderWidth {
    return ^(CGFloat layerBorderWidth) {
        self.layer.borderWidth = layerBorderWidth;
        return self;
    };
}

- (UIScrollView * (^)(UIColor *))aozLayerBorderColor {
    return ^(UIColor * layerBorderColor) {
        self.layer.borderColor = layerBorderColor.CGColor;
        return self;
    };
}

- (UIScrollView * (^)(CGFloat))aozLayerCornerRaduis {
    return ^(CGFloat layerCornerRaduis) {
        self.layer.cornerRadius = layerCornerRaduis;
        return self;
    };
}

#pragma mark public: Bounds and Frames
- (UIScrollView * (^)(CGRect))aozFrame {
    return ^(CGRect frame) {
        self.frame = frame;
        return self;
    };
}

- (UIScrollView * (^)(CGRect))aozBounds {
    return ^(CGRect bounds) {
        self.bounds = bounds;
        return self;
    };
}

- (UIScrollView * (^)(CGPoint))aozCenter {
    return ^(CGPoint center) {
        self.center = center;
        return self;
    };
}

- (UIScrollView * (^)(CGAffineTransform))aozTransform {
    return ^(CGAffineTransform transform) {
        self.transform = transform;
        return self;
    };
}

#pragma mark public: Visual Appearance
- (UIScrollView * (^)(UIColor *))aozBackgroundColor {
    return ^(UIColor * backgroundColor) {
        self.backgroundColor = backgroundColor;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozHidden {
    return ^(BOOL hidden) {
        self.hidden = hidden;
        return self;
    };
}

- (UIScrollView * (^)(CGFloat))aozAlpha {
    return ^(CGFloat alpha) {
        self.alpha = alpha;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozOpaque {
    return ^(BOOL opaque) {
        self.opaque = opaque;
        return self;
    };
}

- (UIScrollView * (^)(UIColor *))aozTintColor {
    return ^(UIColor * tintColor) {
        self.tintColor = tintColor;
        return self;
    };
}

- (UIScrollView * (^)(UIViewTintAdjustmentMode))aozTintAdjustmentMode {
    return ^(UIViewTintAdjustmentMode tintAdjustmentMode) {
        self.tintAdjustmentMode = tintAdjustmentMode;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozClipsToBounds {
    return ^(BOOL clipsToBounds) {
        self.clipsToBounds = clipsToBounds;
        return self;
    };
}

#pragma mark public: Events
- (UIScrollView * (^)(BOOL))aozUserInteractionEnabled {
    return ^(BOOL userInteractionEnabled) {
        self.userInteractionEnabled = userInteractionEnabled;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozMultipleTouchEnabled {
    return ^(BOOL multipleTouchEnabled) {
        self.multipleTouchEnabled = multipleTouchEnabled;
        return self;
    };
}

- (UIScrollView * (^)(BOOL))aozExclusiveTouch {
    return ^(BOOL exclusiveTouch) {
        self.exclusiveTouch = exclusiveTouch;
        return self;
    };
}

#pragma mark public: Resizing Behavior
- (UIScrollView * (^)(UIViewContentMode))aozContentMode {
    return ^(UIViewContentMode contentMode) {
        self.contentMode = contentMode;
        return self;
    };
}

#pragma mark public: Identifying the View at Runtime
- (UIScrollView * (^)(NSInteger))aozTag {
    return ^(NSInteger tag) {
        self.tag = tag;
        return self;
    };
}

@end
